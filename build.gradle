//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "maven-publish"
	alias libs.plugins.loom
	alias libs.plugins.githubRelease
	alias libs.plugins.minotaur
}

version = "$baseVersion+$branch"
archivesBaseName = project.archivesName

repositories {
	maven { url "https://maven.cafeteria.dev/releases" }
	maven { url "https://repo.sleeping.town/" }
}

dependencies {
	implementation libs.kaleidoConfig
	include libs.kaleidoConfig

	minecraft libs.mc
	mappings variantOf(libs.yarn) { classifier "v2" }
	modImplementation libs.fl
	modImplementation libs.fapi

	modCompileOnly(libs.seasons) {
		exclude group: "me.shedaniel"
		exclude group: "com.terraformersmc"
	}
}

processResources {
	final Map<String, String> meta = [
		version        : version,
		modId          : modId,
		modName        : modName,
		modDescription : modDescription,
		homepage       : homepage,
		issues         : issues,
		sources        : sources,
		license        : license,
		authors        : authors.split(", ").join("\",\n    \""),
		members        : "${authors}",
		mc             : libs.versions.mc.get(),
		fl             : libs.versions.fl.get(),
		fapi           : libs.versions.fapi.get(),
		"kaleidoConfig": libs.versions.kaleidoConfig.get(),
		"seasons"      : libs.versions.seasons.get(),
	]
	inputs.properties(meta)
	filesMatching("*.mod.json") { expand(meta) }
	filesMatching("META-INF/*mods.toml") { expand(meta) }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "picohud"
	versionNumber = project.version
	uploadFile = remapJar
	gameVersions = compatibleVersions.split(", ").toList()
	loaders = compatibleLoaders.split(", ").toList()
	dependencies {
		required.version libs.fapi.get().getName(), libs.versions.fapi.get()
		optional.version libs.seasons.get().getName(), libs.versions.seasons.get()
	}
	changelog = !file("CHANGELOG.md").exists() ? "" : rootProject.file("CHANGELOG.md").text + "\n\nChangelog: https://github.com/sisby-folk/$project.name/releases/tag/v$version"
	syncBodyFrom = rootProject.file("README.md").text
}

githubRelease {
	token System.getenv("GITHUB_TOKEN")
	owner "sisby-folk"
	repo "picohud"
	tagName "v" + version
	releaseName version
	targetCommitish branch
	releaseAssets remapJar
	generateReleaseNotes true
	body !file("CHANGELOG.md").exists() ? "" : rootProject.file("CHANGELOG.md").text
}

tasks.register("fullRelease") {
	group "publishing"
	dependsOn "githubRelease"
	dependsOn "modrinth"
}
